# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64|ARM64'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
  x64TarFileAddress: 'https://releases.aosc.io/os-amd64/container/aosc-os_container_20210602_amd64.tar.xz'
  x64TarFileHash: '975a21b5a1a27ff97a142494ec15cb6566ecce2572046704c89e3d8a4a297ddb'
  arm64TarFileAddress: 'https://releases.aosc.io/os-arm64/container/aosc-os_container_20210602_arm64.tar.xz'
  arm64TarFileHash: '88bdea5f6a533d1635d9f9f697917c5e9c7f86c211965e4279d5644e343d5e52'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      New-Item -Path x64 -ItemType Directory
      Invoke-WebRequest -Uri $(x64TarFileAddress) -OutFile x64\install.tar.gz
      if ((Get-FileHash -Path .\x64\install.tar.gz).Hash -ne $(x64TarFileHash)) {throw "x64 tar file hash not match."}
      New-Item -Path ARM64 -ItemType Directory
      Invoke-WebRequest -Uri $(arm64TarFileAddress) -OutFile ARM64\install.tar.gz
      if ((Get-FileHash -Path .\ARM64\install.tar.gz).Hash -ne $(arm64TarFileHash)) {throw "ARM64 tar file hash not match."}
    showWarnings: true
    pwsh: true

- task: VSBuild@1
  inputs:
    platform: 'x64,ARM64'
    solution: '$(solution)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload'
